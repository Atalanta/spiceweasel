#!/usr/bin/env ruby

require 'json'
require 'mixlib/cli'
require 'spiceweasel/version'
require 'yaml'

#ensure that the run_list contents are present in either the cookbooks or roles
def validate_run_list(run_list, cookbooks, environments, roles)
  run_list.each do |item|
    if item.start_with?("recipe")
      #recipe[foo] or recipe[foo::bar]
      recipe = item.slice(7..-2).split("::")[0]
      unless cookbooks.member?(recipe)
        raise "'#{item}' is an invalid run_list recipe not managed by spiceweasel"
        exit(-1)
      end
    elsif item.start_with?("environment")
      # if cli.config[:chefversion] == '0.9'
      #   raise "Environments are not supported in Chef 0.9.x"
      #   exit(-1)
      # end
      #environment[blah]
      environment = item.slice(12..-2)
      unless environments.member?(environment)
        raise "'#{item}' is an invalid run_list environment not managed by spiceweasel"
        exit(-1)
      end
    elsif item.start_with?("role")
      #role[blah]
      role = item.slice(5..-2)
      unless roles.member?(role)
        raise "'#{item}' is an invalid run_list role not managed by spiceweasel"
        exit(-1)
      end
    else 
      raise "'#{item}' is an invalid run_list component"
      exit(-1)
    end
  end
end

class SpiceweaselCLI
  include Mixlib::CLI

  banner("Usage: spiceweasel [option] file")

  # option :chefversion,
  # :short => "-c",
  # :long => "--chefversion",
  # :description => "Select which version of Chef is being used ('0.9' or '0.10'). Default is '0.10'",
  # :boolean => false

  option :delete,
  :short => "-d",
  :long => "--delete",
  :description => "Print the knife commands to be delete the infrastructure",
  :boolean => true

  option :dryrun,
  :long => "--dryrun",
  :description => "Print the knife commands to be executed to STDOUT",
  :boolean => true

  option :help,
  :short => "-h",
  :long => "--help",
  :description => "Show this message",
  :on => :tail,
  :boolean => true,
  :show_options => true,
  :exit => 0

  option :rebuild,
  :short => "-r",
  :long => "--rebuild",
  :description => "Print the knife commands to be delete and recreate the infrastructure",
  :boolean => true

  option :version,
  :short => "-v",
  :long => "--version",
  :description => "Version",
  :boolean => true,
  :proc => lambda {|v| puts "Spiceweasel: #{Spiceweasel::VERSION}" },
  :exit => 0
end

#process command line options
begin
  ARGV << "-h" if ARGV.empty? 
  cli = SpiceweaselCLI.new
  cli.parse_options
rescue OptionParser::InvalidOption => e 
  STDERR.puts e.message
  puts cli.opt_parser.to_s
  exit(-1)
end

begin
  file = ARGV.last
  if (file.end_with?(".yml"))
    input = YAML.load_file ARGV.last
  elsif (file.end_with?(".json"))
    input = JSON.parse(File.read(ARGV.last))
  else
    raise "Unknown file type, please use a file ending with either '.json' or '.yml'."
    exit(-1)
  end
rescue JSON::ParserError => e
  STDERR.puts e.message
  STDERR.puts "Parsing error in the infrastructure file provided."
  exit(-1)
rescue Exception
  STDERR.puts "No infrastructure .json or .yml file provided."
  puts cli.opt_parser.to_s
  exit(-1)
end

create = String.new()
delete = String.new()

#cookbooks 
cookbooks = input['cookbooks'] || []
cookbook_list = []
cookbooks.each do |cookbook|
  cb = cookbook.keys.first
  if cookbook[cb] and cookbook[cb].length > 0
    version = cookbook[cb][0] || ""
    args = cookbook[cb][1] || ""
  end
  delete += "knife cookbook delete #{cb} #{version} -y\n"
  if File.directory?("cookbooks")
    if version and File.directory?("cookbooks/#{cb}")
      #check metadata.rb for requested version
      metadata = File.open("cookbooks/#{cb}/metadata.rb").grep(/^version/)[0].split()[1].gsub(/"/,'')
      if (metadata != version[0])
        raise "Invalid version '#{version[0]}' of '#{cb}' requested, '#{metadata}' is already in the cookbooks directory."
        exit(-1)
      end
    elsif !File.directory?("cookbooks/#{cb}")
      create += "knife cookbook site download #{cb} #{version} #{args}\n"
    end
  else
    STDERR.puts "cookbooks directory not found, validation and downloading skipped"
  end
  create += "knife cookbook upload #{cb}\n"
  #flatten list of cookbooks for validation later
  cookbook_list.push(cb)
end

#environments 
environments = input['environments'] || []
environment_list = []
environments.each do |environment|
  delete += "knife environment delete #{environment.keys[0]} -y\n"
  create += "knife environment from file #{environment.keys[0]}.rb\n"
  #flatten list of environments for validation later
  environment_list.push(environment.keys[0])
end

#roles 
roles = input['roles'] || []
role_list = []
roles.each do |role|
  delete += "knife role delete #{role.keys[0]} -y\n"
  create += "knife role from file #{role.keys[0]}.rb\n"
  #flatten list of roles for validation later
  role_list.push(role.keys[0])
end

#data bags
bags = input['data bags'] || []
bags.each do |bag|
  delete += "knife data bag delete #{bag.keys[0]} -y\n"
  create += "knife data bag create #{bag.keys[0]}\n"
  items = bag[bag.keys[0]] || []
  items.each do |item|
    create += "knife data bag from file #{bag.keys[0]} data_bags/#{item}.json\n"
  end
end

nodes = input['nodes'] || []
#currently use bulk_delete for deleting, add provider support real soon
delete += "knife node bulk_delete .* -y\n"
nodes.each do |node|
  # delete += "knife node delete #{node[node.keys[0]}\n"
  run_list = node[node.keys[0]][0].split()
  validate_run_list(run_list, cookbook_list, environment_list, role_list)
  if node.keys[0].start_with?("bluebox","ec2","openstack","rackspace","slicehost","terremark")
    provider = node.keys[0].split()
    count = 1
    if (provider.length == 2)
      count = provider[1] 
    end
    count.to_i.times do
      create += "knife #{provider[0]} server create "
      run_list.each do |x|
        create += "\'#{x}\' "
      end
      create +="#{node[node.keys[0]][1]}\n"
    end
  else
    create += "knife bootstrap #{node.keys[0]} "
    run_list.each do |x|
      create += "\'#{x}\' "
    end
    create +="#{node[node.keys[0]][1]}\n"
  end
end

#just print the knife commands, do not execute
#if cli.config[:dryrun]
if cli.config[:delete] 
  puts delete unless delete.empty?
elsif cli.config[:rebuild]
  puts delete unless delete.empty?
  puts create unless create.empty?
else
  puts create unless create.empty?
end       
#else
#eventually we will execute instead of printing knife commands
#puts "BAM!"
#end
