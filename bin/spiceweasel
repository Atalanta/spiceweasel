#!/usr/bin/env ruby

require 'mixlib/cli'
require 'yaml'

class SpiceweaselCLI
  include Mixlib::CLI

  banner("Usage: spiceweasel [option] file")

  option :delete,
  :short => "-d",
  :long => "--delete",
  :description => "Print the knife commands to be delete the infrastructure",
  :boolean => true

  option :dryrun,
  :long => "--dryrun",
  :description => "Print the knife commands to be executed to STDOUT",
  :boolean => true

  option :help,
  :short => "-h",
  :long => "--help",
  :description => "Show this message",
  :on => :tail,
  :boolean => true,
  :show_options => true,
  :exit => 0

  option :version,
  :short => "-v",
  :long => "--version",
  :description => "Version",
  :boolean => true,
  :proc => lambda {|v| puts "Spiceweasel: 0.2" },
  :exit => 0

end

#process command line options
begin
  ARGV << "-h" if ARGV.empty? 
  cli = SpiceweaselCLI.new
  cli.parse_options
rescue OptionParser::InvalidOption => e 
  STDERR.puts e.message
  #puts???
  exit(-1)
end

begin
  yml = YAML.load_file ARGV.last
rescue Exception
  STDERR.puts "No infrastructure YAML file provided."
  #puts???
  exit(-1)
end

create = String.new()
delete = String.new()

#cookbooks 
cookbooks = yml['cookbooks'] || []
cookbooks.each do |cookbook|
  if cli.config[:delete]
    delete += "knife cookbook delete #{cookbook}\n"
  else
    create += "knife cookbook upload #{cookbook}\n"
  end
end

#roles 
roles = yml['roles'] || []
roles.each do |role|
  if cli.config[:delete]
    delete += "knife role delete #{role}\n"
  else
    create += "knife role from file #{role}.rb\n"
  end
end

#data bags
bags = yml['data bags'] || {}
bags.keys.each do |bag|
  if cli.config[:delete]
    delete += "knife data bag delete #{bag}\n"
  else
    create += "knife data bag create #{bag}\n"
    items = bags[bag] || []
    items.each do |item|
      create += "knife data bag from file #{bag} data_bags/#{item}.json\n"
    end
  end
end

nodes = yml['nodes'] || {}
nodes.keys.each do |node|
  if cli.config[:delete]
    delete += "knife node delete #{node}\n"
  else
    run_list = nodes[node][0].split()
    #TODO verify the run_list against the nodes and recipes
    if node.start_with?("bluebox","ec2","rackspace","slicehost","terremark")
      provider = node.split()
      count = 1
      if (provider.length == 2)
        count = provider[1] 
      end
      count.to_i.times do
        create += "knife #{provider[0]} server create "
        run_list.each do |x|
          create += "\'#{x}\' "
        end
        create +="#{nodes[node][1]}\n"
      end
    else
      create += "knife bootstrap #{node} "
      run_list.each do |x|
        create += "\'#{x}\' "
      end
      create +="#{nodes[node][1]}\n"
    end
  end
end


#--dryrun 
#just print the knife commands, do not execute
if cli.config[:dryrun]
  puts delete unless delete.empty?
  puts create unless create.empty?
else
  #eventually we will execute instead of printing knife commands
  puts delete unless delete.empty?
  puts create unless create.empty?
  #puts "BAM!"
end

